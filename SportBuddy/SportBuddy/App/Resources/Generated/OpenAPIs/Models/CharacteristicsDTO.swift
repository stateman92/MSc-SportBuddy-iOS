//
// CharacteristicsDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CharacteristicsDTO: Codable, JSONEncodable, Hashable {

    public enum FirstHalfPositionType: String, Codable, CaseIterable {
        case around0 = "around0"
        case around45 = "around45"
        case around90 = "around90"
        case around135 = "around135"
        case around180 = "around180"
    }
    public enum FirstFullPositionType: String, Codable, CaseIterable {
        case around0 = "around0"
        case around45 = "around45"
        case around90 = "around90"
        case around135 = "around135"
        case around180 = "around180"
        case around225 = "around225"
        case around270 = "around270"
        case around315 = "around315"
    }
    public enum SecondFullPositionType: String, Codable, CaseIterable {
        case around0 = "around0"
        case around45 = "around45"
        case around90 = "around90"
        case around135 = "around135"
        case around180 = "around180"
        case around225 = "around225"
        case around270 = "around270"
        case around315 = "around315"
    }
    public enum SecondHalfPositionType: String, Codable, CaseIterable {
        case around0 = "around0"
        case around45 = "around45"
        case around90 = "around90"
        case around135 = "around135"
        case around180 = "around180"
    }
    public enum DistanceType: String, Codable, CaseIterable {
        case around0 = "around0"
        case around1 = "around1"
        case around2 = "around2"
        case around3 = "around3"
        case around4 = "around4"
        case aroundminus1 = "aroundMinus1"
        case aroundminus2 = "aroundMinus2"
        case aroundminus3 = "aroundMinus3"
        case aroundminus4 = "aroundMinus4"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case arms = "arms"
        case legs = "legs"
    }
    public var firstHalfPositionType: FirstHalfPositionType
    public var firstFullPositionType: FirstFullPositionType
    public var secondFullPositionType: SecondFullPositionType
    public var secondHalfPositionType: SecondHalfPositionType
    public var distanceType: DistanceType
    public var type: ModelType

    public init(firstHalfPositionType: FirstHalfPositionType, firstFullPositionType: FirstFullPositionType, secondFullPositionType: SecondFullPositionType, secondHalfPositionType: SecondHalfPositionType, distanceType: DistanceType, type: ModelType) {
        self.firstHalfPositionType = firstHalfPositionType
        self.firstFullPositionType = firstFullPositionType
        self.secondFullPositionType = secondFullPositionType
        self.secondHalfPositionType = secondHalfPositionType
        self.distanceType = distanceType
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstHalfPositionType
        case firstFullPositionType
        case secondFullPositionType
        case secondHalfPositionType
        case distanceType
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(firstHalfPositionType, forKey: .firstHalfPositionType)
        try container.encode(firstFullPositionType, forKey: .firstFullPositionType)
        try container.encode(secondFullPositionType, forKey: .secondFullPositionType)
        try container.encode(secondHalfPositionType, forKey: .secondHalfPositionType)
        try container.encode(distanceType, forKey: .distanceType)
        try container.encode(type, forKey: .type)
    }
}

