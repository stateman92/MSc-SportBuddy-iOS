//
// CharacteristicsDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CharacteristicsDTO: Codable, JSONEncodable, Hashable {

    public var firstHalfPositionType: HalfPositionTypeDTO?
    public var firstFullPositionType: FullPositionTypeDTO?
    public var secondFullPositionType: FullPositionTypeDTO?
    public var secondHalfPositionType: HalfPositionTypeDTO?
    public var distanceType: DistanceTypeDTO?
    public var type: CharacteristicsTypeDTO

    public init(firstHalfPositionType: HalfPositionTypeDTO? = nil, firstFullPositionType: FullPositionTypeDTO? = nil, secondFullPositionType: FullPositionTypeDTO? = nil, secondHalfPositionType: HalfPositionTypeDTO? = nil, distanceType: DistanceTypeDTO? = nil, type: CharacteristicsTypeDTO) {
        self.firstHalfPositionType = firstHalfPositionType
        self.firstFullPositionType = firstFullPositionType
        self.secondFullPositionType = secondFullPositionType
        self.secondHalfPositionType = secondHalfPositionType
        self.distanceType = distanceType
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstHalfPositionType
        case firstFullPositionType
        case secondFullPositionType
        case secondHalfPositionType
        case distanceType
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(firstHalfPositionType, forKey: .firstHalfPositionType)
        try container.encodeIfPresent(firstFullPositionType, forKey: .firstFullPositionType)
        try container.encodeIfPresent(secondFullPositionType, forKey: .secondFullPositionType)
        try container.encodeIfPresent(secondHalfPositionType, forKey: .secondHalfPositionType)
        try container.encodeIfPresent(distanceType, forKey: .distanceType)
        try container.encode(type, forKey: .type)
    }
}

