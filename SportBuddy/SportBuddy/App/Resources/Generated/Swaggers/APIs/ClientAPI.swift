//
// ClientAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ClientAPI {
    /**
     Chatting
     
     - parameter chatEntryDTOId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatEntriesDelete(chatEntryDTOId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        chatEntriesDeleteWithRequestBuilder(chatEntryDTOId: chatEntryDTOId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Chatting
     - DELETE /chatEntries
     - Delete a chat message
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter chatEntryDTOId: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func chatEntriesDeleteWithRequestBuilder(chatEntryDTOId: UUID) -> RequestBuilder<Void> {
        let path = "/chatEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ChatEntryDTOId": chatEntryDTOId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Chatting
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatEntriesGet(completion: @escaping ((_ data: [ChatDTO]?,_ error: Error?) -> Void)) {
        chatEntriesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Chatting
     - GET /chatEntries
     - Get a chat's messages
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[ChatDTO]> 
     */
    open class func chatEntriesGetWithRequestBuilder() -> RequestBuilder<[ChatDTO]> {
        let path = "/chatEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ChatDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Chatting
     
     - parameter chatEntryDTOId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatEntriesPatch(chatEntryDTOId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        chatEntriesPatchWithRequestBuilder(chatEntryDTOId: chatEntryDTOId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Chatting
     - PATCH /chatEntries
     - Undo message deletion
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter chatEntryDTOId: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func chatEntriesPatchWithRequestBuilder(chatEntryDTOId: UUID) -> RequestBuilder<Void> {
        let path = "/chatEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ChatEntryDTOId": chatEntryDTOId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Chatting
     
     - parameter chatId: (query)  
     - parameter message: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatEntriesPost(chatId: UUID, message: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        chatEntriesPostWithRequestBuilder(chatId: chatId, message: message).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Chatting
     - POST /chatEntries
     - Send a chat message
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter chatId: (query)  
     - parameter message: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func chatEntriesPostWithRequestBuilder(chatId: UUID, message: String) -> RequestBuilder<Void> {
        let path = "/chatEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "chatId": chatId, 
            "message": message
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Chatting
     
     - parameter chatEntryDTOId: (query)  
     - parameter modifiedMessage: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatEntriesPut(chatEntryDTOId: UUID, modifiedMessage: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        chatEntriesPutWithRequestBuilder(chatEntryDTOId: chatEntryDTOId, modifiedMessage: modifiedMessage).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Chatting
     - PUT /chatEntries
     - Modify a chat message
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter chatEntryDTOId: (query)  
     - parameter modifiedMessage: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func chatEntriesPutWithRequestBuilder(chatEntryDTOId: UUID, modifiedMessage: String) -> RequestBuilder<Void> {
        let path = "/chatEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ChatEntryDTOId": chatEntryDTOId, 
            "modifiedMessage": modifiedMessage
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Chatting
     
     - parameter chatId: (query)  
     - parameter image: (body)  (optional)
     - parameter users: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func chatPut(chatId: UUID, image: String? = nil, users: [UUID]? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        chatPutWithRequestBuilder(chatId: chatId, image: image, users: users).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Chatting
     - PUT /chat
     - Update a chat
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter chatId: (query)  
     - parameter image: (body)  (optional)
     - parameter users: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func chatPutWithRequestBuilder(chatId: UUID, image: String? = nil, users: [UUID]? = nil) -> RequestBuilder<Void> {
        let path = "/chat"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: image)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "chatId": chatId, 
            "users": users
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Handle exercises
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exerciseGet(completion: @escaping ((_ data: [ExerciseDTO]?,_ error: Error?) -> Void)) {
        exerciseGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Handle exercises
     - GET /exercise
     - Get the exercises
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[ExerciseDTO]> 
     */
    open class func exerciseGetWithRequestBuilder() -> RequestBuilder<[ExerciseDTO]> {
        let path = "/exercise"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ExerciseDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send a recovery email to an existing user
     
     - parameter email: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPasswordPost(email: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        forgotPasswordPostWithRequestBuilder(email: email).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Send a recovery email to an existing user
     - POST /forgotPassword
     - Send a recovery email to an existing user of the application or an admin
     
     - parameter email: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func forgotPasswordPostWithRequestBuilder(email: String) -> RequestBuilder<Void> {
        let path = "/forgotPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "email": email
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group messaging
     
     - parameter groupEntryDTOId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupEntriesDelete(groupEntryDTOId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        groupEntriesDeleteWithRequestBuilder(groupEntryDTOId: groupEntryDTOId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Group messaging
     - DELETE /groupEntries
     - Delete a group message
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter groupEntryDTOId: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func groupEntriesDeleteWithRequestBuilder(groupEntryDTOId: UUID) -> RequestBuilder<Void> {
        let path = "/groupEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "GroupEntryDTOId": groupEntryDTOId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group messaging
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupEntriesGet(completion: @escaping ((_ data: [GroupDTO]?,_ error: Error?) -> Void)) {
        groupEntriesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Group messaging
     - GET /groupEntries
     - Get a group's messages
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[GroupDTO]> 
     */
    open class func groupEntriesGetWithRequestBuilder() -> RequestBuilder<[GroupDTO]> {
        let path = "/groupEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GroupDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group messaging
     
     - parameter groupEntryDTOId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupEntriesPatch(groupEntryDTOId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        groupEntriesPatchWithRequestBuilder(groupEntryDTOId: groupEntryDTOId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Group messaging
     - PATCH /groupEntries
     - Undo message deletion
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter groupEntryDTOId: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func groupEntriesPatchWithRequestBuilder(groupEntryDTOId: UUID) -> RequestBuilder<Void> {
        let path = "/groupEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "GroupEntryDTOId": groupEntryDTOId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group messaging
     
     - parameter groupId: (query)  
     - parameter message: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupEntriesPost(groupId: UUID, message: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        groupEntriesPostWithRequestBuilder(groupId: groupId, message: message).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Group messaging
     - POST /groupEntries
     - Post a group message
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter groupId: (query)  
     - parameter message: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func groupEntriesPostWithRequestBuilder(groupId: UUID, message: String) -> RequestBuilder<Void> {
        let path = "/groupEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "groupId": groupId, 
            "message": message
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group messaging
     
     - parameter groupEntryDTOId: (query)  
     - parameter modifiedMessage: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupEntriesPut(groupEntryDTOId: UUID, modifiedMessage: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        groupEntriesPutWithRequestBuilder(groupEntryDTOId: groupEntryDTOId, modifiedMessage: modifiedMessage).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Group messaging
     - PUT /groupEntries
     - Modify a group message
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter groupEntryDTOId: (query)  
     - parameter modifiedMessage: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func groupEntriesPutWithRequestBuilder(groupEntryDTOId: UUID, modifiedMessage: String) -> RequestBuilder<Void> {
        let path = "/groupEntries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "GroupEntryDTOId": groupEntryDTOId, 
            "modifiedMessage": modifiedMessage
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group messaging managing
     
     - parameter groupId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupManagingDelete(groupId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        groupManagingDeleteWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Group messaging managing
     - DELETE /groupManaging
     - Leave group
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter groupId: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func groupManagingDeleteWithRequestBuilder(groupId: UUID) -> RequestBuilder<Void> {
        let path = "/groupManaging"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "groupId": groupId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get groups
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupManagingGet(completion: @escaping ((_ data: [GroupDTO]?,_ error: Error?) -> Void)) {
        groupManagingGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get groups
     - GET /groupManaging
     - Get the list of groups
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[GroupDTO]> 
     */
    open class func groupManagingGetWithRequestBuilder() -> RequestBuilder<[GroupDTO]> {
        let path = "/groupManaging"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GroupDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group messaging managing
     
     - parameter groupId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupManagingPost(groupId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        groupManagingPostWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Group messaging managing
     - POST /groupManaging
     - Join a group
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter groupId: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func groupManagingPostWithRequestBuilder(groupId: UUID) -> RequestBuilder<Void> {
        let path = "/groupManaging"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "groupId": groupId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Group messaging
     
     - parameter groupId: (query)  
     - parameter image: (body)  (optional)
     - parameter users: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func groupPut(groupId: UUID, image: String? = nil, users: [UUID]? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        groupPutWithRequestBuilder(groupId: groupId, image: image, users: users).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Group messaging
     - PUT /group
     - Update a group
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter groupId: (query)  
     - parameter image: (body)  (optional)
     - parameter users: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func groupPutWithRequestBuilder(groupId: UUID, image: String? = nil, users: [UUID]? = nil) -> RequestBuilder<Void> {
        let path = "/group"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: image)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "groupId": groupId, 
            "users": users
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Login an existing user
     
     - parameter email: (query)  
     - parameter password: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginPost(email: String, password: String, completion: @escaping ((_ data: UserResponseDTO?,_ error: Error?) -> Void)) {
        loginPostWithRequestBuilder(email: email, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Login an existing user
     - POST /login
     - Login an existing user of the application or an admin
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter email: (query)  
     - parameter password: (query)  

     - returns: RequestBuilder<UserResponseDTO> 
     */
    open class func loginPostWithRequestBuilder(email: String, password: String) -> RequestBuilder<UserResponseDTO> {
        let path = "/login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "email": email, 
            "password": password
        ])

        let requestBuilder: RequestBuilder<UserResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Logout an existing user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logoutPost(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        logoutPostWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Logout an existing user
     - POST /logout
     - Logout an existing user of the application or an admin
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer

     - returns: RequestBuilder<Void> 
     */
    open class func logoutPostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Register a user
     
     - parameter name: (query)  
     - parameter email: (query)  
     - parameter password: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerPost(name: String, email: String, password: String, completion: @escaping ((_ data: UserResponseDTO?,_ error: Error?) -> Void)) {
        registerPostWithRequestBuilder(name: name, email: email, password: password).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register a user
     - POST /register
     - Register a new user in the application
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter name: (query)  
     - parameter email: (query)  
     - parameter password: (query)  

     - returns: RequestBuilder<UserResponseDTO> 
     */
    open class func registerPostWithRequestBuilder(name: String, email: String, password: String) -> RequestBuilder<UserResponseDTO> {
        let path = "/register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "email": email, 
            "password": password
        ])

        let requestBuilder: RequestBuilder<UserResponseDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search a user
     
     - parameter name: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchUserPost(name: String, completion: @escaping ((_ data: [UserDTO]?,_ error: Error?) -> Void)) {
        searchUserPostWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search a user
     - POST /searchUser
     - Search a user
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={}}]
     
     - parameter name: (query)  

     - returns: RequestBuilder<[UserDTO]> 
     */
    open class func searchUserPostWithRequestBuilder(name: String) -> RequestBuilder<[UserDTO]> {
        let path = "/searchUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name
        ])

        let requestBuilder: RequestBuilder<[UserDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Test
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        testGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Test
     - GET /test
     - Test

     - returns: RequestBuilder<Void> 
     */
    open class func testGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/test"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
